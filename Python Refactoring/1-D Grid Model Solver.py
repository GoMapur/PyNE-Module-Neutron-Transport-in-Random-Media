# TODO: 1. Documents codes
#       2. Add parameter docs
#       3. Unit testing
#       4. Class docs

# Codes for Nuclear Engineering Department @ Berkeley
# This is a summer project, translation and packaging past codes for 1-D
# Nutron transport simulations.
# Note this file is highly extensible so I suggest it could be used in future
# similar simulation designs, plz improve anything if you'd like, it would be
# my honor.
# Mingjian Lu, July 2016

import numpy as np

class Spatial_Point():
    def __init__(self, place, index, material = None):
        self.material = None
        self.index = index
        self.x = place

    def isInterface(self):
        return self.material is None

    def material(self):
        return self.material

    def index(self):
        return self.index

    def x(self):
        return self.x

    def counter(self):
        start = 0
        def f():
            ret = start
            start += 1
            return ret
        return f

class Model_1D_Numerical_Solver():
    cache = {}

    def __init__(self, grid, gauss_discrete_direction_num = 2, total_point_num = -1, discretization_stepsize = -1,):
        """ NOTE: please clean up the discrete_direction_num before call this
            super constructor. Eg, for Gauss Legendre Quadrature, plz ensure it
            is even number.
            TODO: Add slab geometry
        """
        self.n = total_point_num
        self.step_size = discretization_stepsize
        self.discrete_direction_num = discrete_direction_num / 2 * 2
        self.grid = grid
        self.mesh = []
        # TODO: Calculate GAUSS-LEGENDRE QUADRATURE
        if self.discrete_direction_num in cache:
            self.guass_legendre = cache[discrete_direction_num]
        else:
            self.guass_legendre = np.polynomial.legendre.leggauss(self.discrete_direction_num)
            cache[discrete_direction_num] = self.guass_legendre

    def point_num(self):
        self.__check_n()
        return self.n

    def step_size(self):
        self.__check_s()
        return self.step_size

    def avg_step_size(self):
        self.__check_n()
        return float(self.grid.len()) / float(self.n)

    def gauss_u(self):
        return self.guass_legendre[0]

    def gauss_weight(self):
        return self.guass_legendre[1]

    def __check_n(self):
        if self.n == -1:
            raise Exception("The grid needs to be generated since you are using a nontrivial grid.")

    def __check_s(self):
        if self.n == -1:
            raise Exception("This is a complex grid so there is no fixed step size, plz use avg_step_size method instead.")

    def check_init_state(self):
        return len(self.mesh) > 1

    def add_point(self, x):
        raise NotImplementedError

    def solve(self):
        raise NotImplementedError

class Model_1D_Stochastic_Finite_Step_Solver(Model_1D_Numerical_Solver):
    """ This is the finite step method solver for the stochastic model.
        Note theortically finite volumn method should perform better than this.
        1. The mesh generated by this class needs revision: TODO: 10/7/2016
        2. abstract general method to super class
    """
    def __init__(self, grid_model, base_point_num = -1, base_step_size = -1, gauss_discrete_direction_num = 2):
        assert((base_point_num == -1 or base_step_size == -1) and not (base_point_num == -1 and base_step_size == -1), "Please either specify base point number or base step size.")
        Model_1D_Numerical_Solver.__init__(self, grid = grid_model, gauss_discrete_direction_num = (discrete_direction_num / 2) * 2)
        if base_point_num != -1
            self.base_step_size = grid_model.len() / float(base_point_num)
            self.base_point_num = base_point_num
        else:
            self.base_step_size = base_step_size
            self.base_point_num = round(grid_model.len() / base_step_size)
        point_counter = Spatial_Point.counter()
        self.mesh += [Spatial_Point(0.0, point_counter(), self.grid.intervalsAt(0.0)[0].material())]
        # Start constructing the mesh, note we will add additional points on
        # interface and inside intercal if the basic points number and step
        # size is not enought to cover all the intervals
        for interval in grid_model:
            while self.mesh[-1].x() < interval.right():
                last_point = self.mesh[-1].x()
                next_base_point = self.base_step_size + last_point
                if next_base_point < interval.right():
                    # If adding a point does not cause exceeding the interface
                    self.mesh += [Spatial_Point(next_base_point, point_counter(), interval.material())]
                elif next_base_point >= interval.right():
                    if interval.left() == last_point:
                        self.mesh += [Spatial_Point(interval.mid_point(), point_counter(), interval.material()), Spatial_Point(interval.right(), point_counter())]
                    elseï¼š
                        self.mesh += [Spatial_Point(interval.right(), point_counter())]
        self.mesh[-1] = Spatial_Point(self.mesh[-1].x(), point_counter(), self.grid.intervalsAt(self.grid.len())[0].material())
        self.mesh_interval_len = [(self.mesh[i+1].x() - self.mesh[i].x()) for i in range(len(self.mesh) - 1)]
        self.n = len(self.mesh)

    def solve(self):
        """ Build matrix and solve, more docs later
            Currently using three points to simulate. We shall try more points
            later
            # TODO: More flexibility that can use more points (say, 5?)
            #       And add abstraction to simplify the calculation
        """
        mesh_point_num = len(self.mesh)
        matrix_size = discrete_direction_num * mesh_point_num
        A = [[0 for _ in range(matrix_size)] for __ in range(matrix_size)]
        B = [0 for _ in range(matrix_size)]
        # Begin constructing the matrix, start by iterating through directions
        u = self.gauss_u()
        wt = self.gauss_weight()
        h = self.mesh_interval_len
        for dir_index in range(self.discrete_direction_num / 2):
            dir_submatrix_index = dir_index * mesh_point_num
            # Deal with edge case, in which left part does not exist
            # TODO: Test different points, 2,3,4,5, make this more flexible
            A[dir_submatrix_index][dir_submatrix_index] = -u[dir_index] / h[0] + self.mesh[0].material().cross_section() - self.mesh[0].material().scattering_section() * wt[dir_index] / 2.0
            A[dir_submatrix_index][dir_submatrix_index+1] = u[dir_index] / h[0]
            # TODO: Why this line has two versions in the original code?
            #       Shouldnt the right side of the matrix is Q/2?
            B[dir_submatrix_index] = self.mesh[0].material().source() / 2.0
            # The first and last points are already taken care of
            for spatial_point in self.mesh[1:-1]:
                cur_point = dir_submatrix_index + spatial_point.index()
                p_index = spatial_point.index()
                if spatial_point.isInterface():
                    A[cur_point][cur_point] = -u[dir_index] * (1/h[p_index]+1/(h[p_index]+h[p_index+1])) + spa


    def add_point(self, x):
        for i in range(len(self.mesh)):
            if self.mesh[i] == x:
                return
            if self.mesh[i] < x and x < self.mesh[i+1]:
                self.mesh.insert(i+1, x)
                return
